<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation" xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
    xmlns:c="clr-namespace:FirstFloor.ModernUI.Windows.Controls" xmlns:mui="clr-namespace:FirstFloor.ModernUI">
  <ResourceDictionary.MergedDictionaries>
    <ResourceDictionary Source="BetterTextBox.xaml" />
    <ResourceDictionary Source="/FirstFloor.ModernUI;component/Themes/ColorPicker.xaml" />
  </ResourceDictionary.MergedDictionaries>

  <Style x:Key="ColorPicker.Borderless" TargetType="c:ColorPicker" BasedOn="{StaticResource {x:Type c:ColorPicker}}">
    <Setter Property="Padding" Value="0" />
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="c:ColorPicker">
          <c:AdornedControl x:Name="Outline" IsAdornerVisible="False">
            <c:AdornedControl.AdornerContent>
              <Border Margin="{StaticResource BorderlessOutline}" BorderThickness="1" BorderBrush="{TemplateBinding BorderBrush}" IsHitTestVisible="False" />
            </c:AdornedControl.AdornerContent>
            <c:Cell>
              <c:BetterTextBox x:Name="PART_TextBox" Style="{StaticResource Borderless}" Template="{StaticResource BetterTextBoxControlTemplate.Simple}"
                  Text="{Binding DisplayColor, RelativeSource={RelativeSource TemplatedParent}, UpdateSourceTrigger=PropertyChanged}"
                  Padding="{TemplateBinding Padding}" Placeholder="{x:Static mui:UiStrings.SelectColor}" />
              <ToggleButton x:Name="PART_Button" HorizontalAlignment="Right" Margin="3 2 5 0"
                  Background="{Binding Color, RelativeSource={RelativeSource TemplatedParent}, Converter={x:Static c:ColorPicker.ColorToBrushConverter}}"
                  Style="{StaticResource ColorPickerToggleButton}"
                  IsHitTestVisible="{Binding ElementName=PART_Popup, Path=IsOpen, Mode=OneWay, Converter={StaticResource InvertBooleanConverter}}" />
              <Popup x:Name="PART_Popup" PlacementTarget="{Binding ElementName=PART_TextBox}" Placement="Bottom" HorizontalOffset="-4"
                  IsOpen="{Binding IsChecked, ElementName=PART_Button, Mode=TwoWay}" VerticalOffset="-5" StaysOpen="False" AllowsTransparency="True"
                  PopupAnimation="Slide">
                <c:Cell x:Name="PART_Root" HorizontalAlignment="Center">
                  <c:ColorPickerPanel x:Name="PART_Panel" Background="{DynamicResource PopupBackground}" BorderThickness="0" Margin="1"
                      Color="{Binding Color, RelativeSource={RelativeSource TemplatedParent}, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}" />
                  <Border BorderBrush="{DynamicResource Accent}" BorderThickness="1" />
                </c:Cell>
              </Popup>
            </c:Cell>
          </c:AdornedControl>
          <ControlTemplate.Triggers>
            <Trigger Property="IsEnabled" Value="False">
              <Setter TargetName="PART_TextBox" Property="Foreground" Value="{DynamicResource InputTextDisabled}" />
            </Trigger>
            <MultiTrigger>
              <MultiTrigger.Conditions>
                <Condition Property="IsEnabled" Value="True" />
                <Condition Property="IsMouseOver" Value="True" />
              </MultiTrigger.Conditions>
              <Setter TargetName="PART_TextBox" Property="Background" Value="{DynamicResource InputBackgroundHover}" />
              <Setter Property="BorderBrush" Value="{DynamicResource InputBorderHover}" />
              <Setter TargetName="Outline" Property="IsAdornerVisible" Value="True" />
            </MultiTrigger>
            <Trigger Property="IsEnabled" Value="False">
              <Setter TargetName="PART_TextBox" Property="Foreground" Value="{DynamicResource InputTextDisabled}" />
            </Trigger>
            <Trigger Property="IsFocused" Value="True">
              <Setter TargetName="Outline" Property="IsAdornerVisible" Value="True" />
              <Setter TargetName="Outline" Property="Order" Value="5" />
              <Setter Property="BorderBrush" Value="{DynamicResource FocusBorder}" />
            </Trigger>
            <Trigger Property="IsKeyboardFocusWithin" Value="True">
              <Setter TargetName="Outline" Property="IsAdornerVisible" Value="True" />
              <Setter TargetName="Outline" Property="Order" Value="5" />
              <Setter Property="BorderBrush" Value="{DynamicResource FocusBorder}" />
            </Trigger>
          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>

  <Style x:Key="ColorPicker.Borderless.White" TargetType="c:ColorPicker" BasedOn="{StaticResource {x:Type c:ColorPicker}}">
    <Setter Property="Padding" Value="0" />
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="c:ColorPicker">
          <c:AdornedControl x:Name="Outline" IsAdornerVisible="False">
            <c:AdornedControl.AdornerContent>
              <Border Margin="{StaticResource BorderlessOutline}" BorderThickness="1" BorderBrush="{TemplateBinding BorderBrush}" IsHitTestVisible="False" />
            </c:AdornedControl.AdornerContent>
            <c:Cell>
              <c:BetterTextBox x:Name="PART_TextBox" Style="{StaticResource Borderless}" Template="{StaticResource BetterTextBoxControlTemplate.Simple}"
                  Text="{Binding DisplayColor, RelativeSource={RelativeSource TemplatedParent}, UpdateSourceTrigger=PropertyChanged}"
                  Padding="{TemplateBinding Padding}" Placeholder="{x:Static mui:UiStrings.SelectColor}" />
              <ToggleButton x:Name="PART_Button" HorizontalAlignment="Right" Margin="3 2 5 0"
                  Background="{Binding Color, RelativeSource={RelativeSource TemplatedParent}, Converter={x:Static c:ColorPicker.ColorToBrushConverter}}"
                  Style="{StaticResource ColorPickerToggleButton}"
                  IsHitTestVisible="{Binding ElementName=PART_Popup, Path=IsOpen, Mode=OneWay, Converter={StaticResource InvertBooleanConverter}}" />
              <Popup x:Name="PART_Popup" PlacementTarget="{Binding ElementName=PART_TextBox}" Placement="Bottom" HorizontalOffset="-4"
                  IsOpen="{Binding IsChecked, ElementName=PART_Button, Mode=TwoWay}" VerticalOffset="-5" StaysOpen="False" AllowsTransparency="True"
                  PopupAnimation="Slide">
                <c:Cell x:Name="PART_Root" Margin="0" HorizontalAlignment="Center">
                  <c:ColorPickerPanel x:Name="PART_Panel" Background="{DynamicResource PopupBackground}" BorderThickness="0" Margin="1"
                      Color="{Binding Color, RelativeSource={RelativeSource TemplatedParent}, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}" />
                  <Border BorderBrush="{DynamicResource Accent}" BorderThickness="1" />
                </c:Cell>
              </Popup>
            </c:Cell>
          </c:AdornedControl>
          <ControlTemplate.Triggers>
            <Trigger Property="IsEnabled" Value="False">
              <Setter TargetName="PART_TextBox" Property="Foreground" Value="{DynamicResource InputTextDisabled}" />
            </Trigger>
            <MultiTrigger>
              <MultiTrigger.Conditions>
                <Condition Property="IsEnabled" Value="True" />
                <Condition Property="IsMouseOver" Value="True" />
              </MultiTrigger.Conditions>
              <Setter TargetName="PART_TextBox" Property="Background" Value="{DynamicResource InputBackgroundHover}" />
              <Setter Property="BorderBrush" Value="{DynamicResource InputTextHover}" />
              <Setter TargetName="Outline" Property="IsAdornerVisible" Value="True" />
            </MultiTrigger>
            <Trigger Property="IsEnabled" Value="False">
              <Setter TargetName="PART_TextBox" Property="Foreground" Value="{DynamicResource InputTextDisabled}" />
            </Trigger>
            <Trigger Property="IsFocused" Value="True">
              <Setter TargetName="Outline" Property="IsAdornerVisible" Value="True" />
              <Setter TargetName="Outline" Property="Order" Value="5" />
              <Setter Property="BorderBrush" Value="{DynamicResource FocusBorder}" />
            </Trigger>
            <Trigger Property="IsKeyboardFocusWithin" Value="True">
              <Setter TargetName="Outline" Property="IsAdornerVisible" Value="True" />
              <Setter TargetName="Outline" Property="Order" Value="5" />
              <Setter Property="BorderBrush" Value="{DynamicResource FocusBorder}" />
            </Trigger>
          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
</ResourceDictionary>